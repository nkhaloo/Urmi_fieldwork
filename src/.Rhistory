vowel == "i" & emphasis == "emphatic" ~ "iˠ",
TRUE ~ vowel
))
result
# Perform Mahalanobis on separate dataset for speaker
df_s1_filtered <-  result %>%
filter(speaker == "s1") %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2()) %>%
ungroup() %>%
mutate(formant_outlier = NA)
df_s1_filtered <-  result %>%
filter(speaker == "s1") %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2()) %>%
ungroup() %>%
mutate(formant_outlier = NA)
result <-  result %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
result
library(tidyverse)
library(lme4)
library(lmerTest)
#import csv's
df_s1_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/vowels/results_VS.csv", delim = "\t")
df_s2_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/vowels/results_VS.csv", delim = "\t")
#create function that processes df's
process_vowels <- function(df) {
if ("Label" %in% colnames(df)) {
df <- df %>%
# Remove anything following "-" in Filename
mutate(Filename = sub("-.*", "", Filename)) %>%
# Filter out rows where Segment starts with "xx"
filter(!str_starts(Label, "xx")) %>%
# Assign vowel values based on Segment
mutate(vowel = case_when(
str_starts(Label, "ah") ~ "ɑ",
str_starts(Label, "a") & !str_starts(Label, "ah") ~ "æ",
str_starts(Label, "i") ~ "i",
str_starts(Label, "e") & !str_starts(Label, "ex") ~ "ɛ",
str_starts(Label, "ex") ~ "ə",
str_starts(Label, "o") ~ "ø",
str_starts(Label, "u") ~ "y",
TRUE ~ NA_character_
)) %>%
# Create emphasis column
mutate(emphasis = case_when(
grepl("22", Label) ~ "emphatic",
grepl("13$", Label) ~ "mixed",
grepl("33", Label) ~ "mixed",
TRUE ~ "plain"
)) %>%
# Add syllable status column
mutate(syllable_status = case_when(
grepl("13$", Label) ~ "plain_mixed",
grepl("33$", Label) ~ "mixed",
grepl("22$", Label) ~ "emphatic",
grepl("11$", Label) ~ "plain",
TRUE ~ NA_character_
)) %>%
# Calculate duration
mutate(Duration = seg_End - seg_Start) %>%
# Filter out diphthongs (e.g., vowels starting with "j")
filter(!grepl("j", vowel)) %>%
# Select and rename columns
select(Filename, Label, vowel, emphasis, syllable_status, F1_middle = pF1_means002, F2_middle = pF2_means002, Duration)
return(df)
} else {
stop("The dataframe does not have a 'Label' column.")
}
}
#call the function
df_s1 <- process_vowels(df_s1_raw) %>%
mutate(speaker = "s1")
df_s2 <- process_vowels(df_s2_raw) %>%
mutate(speaker = "s2")
#combine the two dataframes
df <- rbind(df_s1, df_s2)
#add stress column from different df
stress <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/metadata/stress.csv")
#join them
# Adding row IDs to help with the join
df <- df %>%
mutate(row_id = row_number())
stress <- stress %>%
mutate(row_id = row_number()) %>%
select(stress, row_id)
# Perform the join using both Filename and row_id
result <- left_join(df, stress, by =  "row_id")
# drop the row_id column after the join
result <- result %>%
select(-row_id)
# create phonetic categories
result <- result %>%
mutate(phonetic_vowel = case_when(
vowel == "ɑ" & emphasis == "emphatic" ~ "ɑˠ",
vowel == "æ" & emphasis == "emphatic" ~ "æˠ",
vowel == "ø" & emphasis == "emphatic" ~ "øˠ",
vowel == "y" & emphasis == "emphatic" ~ "yˠ",
vowel == "ɛ" & emphasis == "emphatic" ~ "ɛˠ",
vowel == "ə" & emphasis == "emphatic" ~ "əˠ",
vowel == "i" & emphasis == "emphatic" ~ "iˠ",
TRUE ~ vowel
))
#### mahalanobis distances ####
# Function to calculate Mahalanobis distance for F1, F2
vmahalanobis_f1f2 = function (dat) {
if (nrow(dat) < 25) {
dat$zF1F2 = NA
return(dat)
}
means = c(mean(dat$F1_middle, na.rm=T), mean(dat$F2_middle, na.rm=T))
cov = cov(cbind(dat$F1_middle, dat$F2_middle))
dat$zF1F2 = mahalanobis(cbind(dat$F1_middle, dat$F2_middle),
center=means, cov=cov)
dat
}
# Set the outlier threshold
distance_cutoff <- 6
# Perform Mahalanobis on separate dataset for speaker
df_s1_filtered <-  result %>%
filter(speaker == "s1") %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2()) %>%
ungroup() %>%
mutate(formant_outlier = NA)
# Perform Mahalanobis on separate dataset for speaker
df_s1_filtered <-  result %>%
filter(speaker == "s1")
df_s1_filtered
df_s1_filtered <- df_s1_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
df_s2_filtered <- result %>%
filter(speaker == "s2")
df_s2_filtered <- df_s2_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
df_s2_filtered
for (i in 1:nrow(df_s1_filtered)) {
if (!is.na(result$zF1F2[i])) {
if (result$zF1F2[i] > distance_cutoff){
result$formant_outlier[i] = "outlier"
}
}
for (i in 1:nrow(df_s2_filtered)) {
if (!is.na(result$zF1F2[i])) {
if (result$zF1F2[i] > distance_cutoff){
result$formant_outlier[i] = "outlier"
}
}
for (i in 1:nrow(df_s1)) {
if (!is.na(result$zF1F2[i])) {
if (result$zF1F2[i] > distance_cutoff){
result$formant_outlier[i] = "outlier"
}
}
}
# Remove flagged values
for (i in 1:nrow(df_s1)) {
if (!is.na(result$zF1F2[i])) {
if (result$zF1F2[i] > distance_cutoff){
result$formant_outlier[i] = "outlier"
}
}
}
df_s1_filtered <- df_s1_filtered %>%
filter(formant_outlier != "outlier" | is.na(formant_outlier))
df_s2_filtered <- df_s2_filtered %>%
filter(formant_outlier != "outlier" | is.na(formant_outlier))
df_s2_filtered
library(tidyverse)
library(lme4)
library(lmerTest)
#import csv's
df_s1_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/vowels/results_VS.csv", delim = "\t")
df_s2_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/vowels/results_VS.csv", delim = "\t")
#create function that processes df's
process_vowels <- function(df) {
if ("Label" %in% colnames(df)) {
df <- df %>%
# Remove anything following "-" in Filename
mutate(Filename = sub("-.*", "", Filename)) %>%
# Filter out rows where Segment starts with "xx"
filter(!str_starts(Label, "xx")) %>%
# Assign vowel values based on Segment
mutate(vowel = case_when(
str_starts(Label, "ah") ~ "ɑ",
str_starts(Label, "a") & !str_starts(Label, "ah") ~ "æ",
str_starts(Label, "i") ~ "i",
str_starts(Label, "e") & !str_starts(Label, "ex") ~ "ɛ",
str_starts(Label, "ex") ~ "ə",
str_starts(Label, "o") ~ "ø",
str_starts(Label, "u") ~ "y",
TRUE ~ NA_character_
)) %>%
# Create emphasis column
mutate(emphasis = case_when(
grepl("22", Label) ~ "emphatic",
grepl("13$", Label) ~ "mixed",
grepl("33", Label) ~ "mixed",
TRUE ~ "plain"
)) %>%
# Add syllable status column
mutate(syllable_status = case_when(
grepl("13$", Label) ~ "plain_mixed",
grepl("33$", Label) ~ "mixed",
grepl("22$", Label) ~ "emphatic",
grepl("11$", Label) ~ "plain",
TRUE ~ NA_character_
)) %>%
# Calculate duration
mutate(Duration = seg_End - seg_Start) %>%
# Filter out diphthongs (e.g., vowels starting with "j")
filter(!grepl("j", vowel)) %>%
# Select and rename columns
select(Filename, Label, vowel, emphasis, syllable_status, F1_middle = pF1_means002, F2_middle = pF2_means002, Duration)
return(df)
} else {
stop("The dataframe does not have a 'Label' column.")
}
}
#call the function
df_s1 <- process_vowels(df_s1_raw) %>%
mutate(speaker = "s1")
df_s2 <- process_vowels(df_s2_raw) %>%
mutate(speaker = "s2")
#combine the two dataframes
df <- rbind(df_s1, df_s2)
#add stress column from different df
stress <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/metadata/stress.csv")
#join them
# Adding row IDs to help with the join
df <- df %>%
mutate(row_id = row_number())
stress <- stress %>%
mutate(row_id = row_number()) %>%
select(stress, row_id)
# Perform the join using both Filename and row_id
result <- left_join(df, stress, by =  "row_id")
# drop the row_id column after the join
result <- result %>%
select(-row_id)
# create phonetic categories
result <- result %>%
mutate(phonetic_vowel = case_when(
vowel == "ɑ" & emphasis == "emphatic" ~ "ɑˠ",
vowel == "æ" & emphasis == "emphatic" ~ "æˠ",
vowel == "ø" & emphasis == "emphatic" ~ "øˠ",
vowel == "y" & emphasis == "emphatic" ~ "yˠ",
vowel == "ɛ" & emphasis == "emphatic" ~ "ɛˠ",
vowel == "ə" & emphasis == "emphatic" ~ "əˠ",
vowel == "i" & emphasis == "emphatic" ~ "iˠ",
TRUE ~ vowel
))
#### mahalanobis distances ####
# Function to calculate Mahalanobis distance for F1, F2
vmahalanobis_f1f2 = function (dat) {
if (nrow(dat) < 25) {
dat$zF1F2 = NA
return(dat)
}
means = c(mean(dat$F1_middle, na.rm=T), mean(dat$F2_middle, na.rm=T))
cov = cov(cbind(dat$F1_middle, dat$F2_middle))
dat$zF1F2 = mahalanobis(cbind(dat$F1_middle, dat$F2_middle),
center=means, cov=cov)
dat
}
# Set the outlier threshold
distance_cutoff <- 6
# Perform Mahalanobis on separate dataset for speaker
df_s1_filtered <-  result %>%
filter(speaker == "s1")
df_s1_filtered <- df_s1_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
df_s2_filtered <- result %>%
filter(speaker == "s2")
df_s2_filtered <- df_s2_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
# Remove flagged values
for (i in 1:nrow(df_s1)) {
if (!is.na(result$zF1F2[i])) {
if (result$zF1F2[i] > distance_cutoff){
result$formant_outlier[i] = "outlier"
}
}
}
for (i in 1:nrow(df_s1)) {
if (!is.na(result$zF1F2[i])) {
if (result$zF1F2[i] > distance_cutoff){
result$formant_outlier[i] = "outlier"
}
}
}
df_s1_filtered <- df_s1_filtered %>%
filter(formant_outlier != "outlier" | is.na(formant_outlier))
df_s2_filtered <- df_s2_filtered %>%
filter(formant_outlier != "outlier" | is.na(formant_outlier))
df_s2_filtered
library(tidyverse)
library(lme4)
library(lmerTest)
#import csv's
df_s1_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/vowels/results_VS.csv", delim = "\t")
df_s2_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/vowels/results_VS.csv", delim = "\t")
#create function that processes df's
process_vowels <- function(df) {
if ("Label" %in% colnames(df)) {
df <- df %>%
# Remove anything following "-" in Filename
mutate(Filename = sub("-.*", "", Filename)) %>%
# Filter out rows where Segment starts with "xx"
filter(!str_starts(Label, "xx")) %>%
# Assign vowel values based on Segment
mutate(vowel = case_when(
str_starts(Label, "ah") ~ "ɑ",
str_starts(Label, "a") & !str_starts(Label, "ah") ~ "æ",
str_starts(Label, "i") ~ "i",
str_starts(Label, "e") & !str_starts(Label, "ex") ~ "ɛ",
str_starts(Label, "ex") ~ "ə",
str_starts(Label, "o") ~ "ø",
str_starts(Label, "u") ~ "y",
TRUE ~ NA_character_
)) %>%
# Create emphasis column
mutate(emphasis = case_when(
grepl("22", Label) ~ "emphatic",
grepl("13$", Label) ~ "mixed",
grepl("33", Label) ~ "mixed",
TRUE ~ "plain"
)) %>%
# Add syllable status column
mutate(syllable_status = case_when(
grepl("13$", Label) ~ "plain_mixed",
grepl("33$", Label) ~ "mixed",
grepl("22$", Label) ~ "emphatic",
grepl("11$", Label) ~ "plain",
TRUE ~ NA_character_
)) %>%
# Calculate duration
mutate(Duration = seg_End - seg_Start) %>%
# Filter out diphthongs (e.g., vowels starting with "j")
filter(!grepl("j", vowel)) %>%
# Select and rename columns
select(Filename, Label, vowel, emphasis, syllable_status, F1_middle = pF1_means002, F2_middle = pF2_means002, Duration)
return(df)
} else {
stop("The dataframe does not have a 'Label' column.")
}
}
#call the function
df_s1 <- process_vowels(df_s1_raw) %>%
mutate(speaker = "s1")
df_s2 <- process_vowels(df_s2_raw) %>%
mutate(speaker = "s2")
#combine the two dataframes
df <- rbind(df_s1, df_s2)
#add stress column from different df
stress <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/metadata/stress.csv")
#join them
# Adding row IDs to help with the join
df <- df %>%
mutate(row_id = row_number())
stress <- stress %>%
mutate(row_id = row_number()) %>%
select(stress, row_id)
# Perform the join using both Filename and row_id
result <- left_join(df, stress, by =  "row_id")
# drop the row_id column after the join
result <- result %>%
select(-row_id)
# create phonetic categories
result <- result %>%
mutate(phonetic_vowel = case_when(
vowel == "ɑ" & emphasis == "emphatic" ~ "ɑˠ",
vowel == "æ" & emphasis == "emphatic" ~ "æˠ",
vowel == "ø" & emphasis == "emphatic" ~ "øˠ",
vowel == "y" & emphasis == "emphatic" ~ "yˠ",
vowel == "ɛ" & emphasis == "emphatic" ~ "ɛˠ",
vowel == "ə" & emphasis == "emphatic" ~ "əˠ",
vowel == "i" & emphasis == "emphatic" ~ "iˠ",
TRUE ~ vowel
))
#### mahalanobis distances ####
# Function to calculate Mahalanobis distance for F1, F2
vmahalanobis_f1f2 = function (dat) {
if (nrow(dat) < 25) {
dat$zF1F2 = NA
return(dat)
}
means = c(mean(dat$F1_middle, na.rm=T), mean(dat$F2_middle, na.rm=T))
cov = cov(cbind(dat$F1_middle, dat$F2_middle))
dat$zF1F2 = mahalanobis(cbind(dat$F1_middle, dat$F2_middle),
center=means, cov=cov)
dat
}
# Set the outlier threshold
distance_cutoff <- 6
# Perform Mahalanobis on separate dataset for speaker
df_s1_filtered <-  result %>%
filter(speaker == "s1")
df_s1_filtered <- df_s1_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
df_s2_filtered <- result %>%
filter(speaker == "s2")
df_s2_filtered <- df_s2_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
df_s2_filtered
library(tidyverse)
library(lme4)
library(lmerTest)
#import csv's
df_s1_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/vowels/results_VS.csv", delim = "\t")
df_s2_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/vowels/results_VS.csv", delim = "\t")
#create function that processes df's
process_vowels <- function(df) {
if ("Label" %in% colnames(df)) {
df <- df %>%
# Remove anything following "-" in Filename
mutate(Filename = sub("-.*", "", Filename)) %>%
# Filter out rows where Segment starts with "xx"
filter(!str_starts(Label, "xx")) %>%
# Assign vowel values based on Segment
mutate(vowel = case_when(
str_starts(Label, "ah") ~ "ɑ",
str_starts(Label, "a") & !str_starts(Label, "ah") ~ "æ",
str_starts(Label, "i") ~ "i",
str_starts(Label, "e") & !str_starts(Label, "ex") ~ "ɛ",
str_starts(Label, "ex") ~ "ə",
str_starts(Label, "o") ~ "ø",
str_starts(Label, "u") ~ "y",
TRUE ~ NA_character_
)) %>%
# Create emphasis column
mutate(emphasis = case_when(
grepl("22", Label) ~ "emphatic",
grepl("13$", Label) ~ "mixed",
grepl("33", Label) ~ "mixed",
TRUE ~ "plain"
)) %>%
# Add syllable status column
mutate(syllable_status = case_when(
grepl("13$", Label) ~ "plain_mixed",
grepl("33$", Label) ~ "mixed",
grepl("22$", Label) ~ "emphatic",
grepl("11$", Label) ~ "plain",
TRUE ~ NA_character_
)) %>%
# Calculate duration
mutate(Duration = seg_End - seg_Start) %>%
# Filter out diphthongs (e.g., vowels starting with "j")
filter(!grepl("j", vowel)) %>%
# Select and rename columns
select(Filename, Label, vowel, emphasis, syllable_status, F1_middle = pF1_means002, F2_middle = pF2_means002, Duration)
return(df)
} else {
stop("The dataframe does not have a 'Label' column.")
}
}
#call the function
df_s1 <- process_vowels(df_s1_raw) %>%
mutate(speaker = "s1")
df_s2 <- process_vowels(df_s2_raw) %>%
mutate(speaker = "s2")
#combine the two dataframes
df <- rbind(df_s1, df_s2)
#add stress column from different df
stress <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/metadata/stress.csv")
#join them
# Adding row IDs to help with the join
df <- df %>%
mutate(row_id = row_number())
stress <- stress %>%
mutate(row_id = row_number()) %>%
select(stress, row_id)
# Perform the join using both Filename and row_id
result <- left_join(df, stress, by =  "row_id")
# drop the row_id column after the join
result <- result %>%
select(-row_id)
# create phonetic categories
result <- result %>%
mutate(phonetic_vowel = case_when(
vowel == "ɑ" & emphasis == "emphatic" ~ "ɑˠ",
vowel == "æ" & emphasis == "emphatic" ~ "æˠ",
vowel == "ø" & emphasis == "emphatic" ~ "øˠ",
vowel == "y" & emphasis == "emphatic" ~ "yˠ",
vowel == "ɛ" & emphasis == "emphatic" ~ "ɛˠ",
vowel == "ə" & emphasis == "emphatic" ~ "əˠ",
vowel == "i" & emphasis == "emphatic" ~ "iˠ",
TRUE ~ vowel
))
result
