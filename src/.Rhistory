aes(x = factor(stop, levels = c("p", "t", "k", "q", "t͡ʃ")),
y = VOT, fill = emphasis)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.9), alpha = 1) +
stat_summary(fun.data = "mean_se", geom = "errorbar",
position = position_dodge(width = 0.75), width = 0.2) +
labs(x = "Stop", y = "", title = "Voiceless Stops") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_blank()) +
coord_cartesian(ylim = y_limits)  # Set the same y-axis limits
# Combine the plots
final_plot <- voiced + voiceless +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "VOT(Ms) by Emphasis",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
print(final_plot)
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
print(final_plot)
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) +
scale_fill_discrete(labels = function(x) stringr::str_to_title(x))
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) &
scale_fill_discrete(labels = function(x) stringr::str_to_title(x))
print(final_plot)
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) +
labs(fill = "Emphasis")
print(final_plot)
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) +
labs(fill = "Emphasis")
print(final_plot)
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
print(final_plot)
s1_plot <- ggplot(em_means_s1_df, aes(x = fricative, y = emmean, color = emphasis)) +
geom_point(position = position_dodge(width = 0.8), size = 4) +  # Points
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
position = position_dodge(width = 0.8), width = 0.2) +  # Error bars
labs(
x = "Fricative",
y = "COG",
title = "Speaker 1",
fill = "Emphasis"
) +
theme_minimal() +
theme(legend.position = "top",
axis.text.x = element_text(size = 14))
s2_plot <- ggplot(em_means_s2_df, aes(x = fricative, y = emmean, color = emphasis)) +
geom_point(position = position_dodge(width = 0.8), size = 4) +  # Points
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
position = position_dodge(width = 0.8), width = 0.2) +  # Error bars
labs(
x = "Fricative",
y = "",
title = "Speaker 2",
fill = "Emphasis"
) +
theme_minimal() +
theme(legend.position = "top",
axis.text.x = element_text(size = 14),
axis.text.y = element_blank())
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
final_plot
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) +
labs(color = "Emphasis")
print(final_plot)
source("~/Desktop/Urmi_fieldwork/src/fricatives_revised.R", echo=TRUE)
print(final_plot)
library(tidyverse)
#import csv
vowels_total <- read_delim(
"/Users/ritalavi/Desktop/Urmi_fieldwork/s1/vowels/VS_s1.csv",
delim = "\t",
show_col_types = FALSE
)
#select columns that we need
vowels <- vowels_total%>%
select(Filename, Label, seg_Start, seg_End, sF1, sF2, sF3)
#create duration column
vowels <- vowels %>%
mutate(duration = seg_End - seg_Start)
#filter out na's
vowels <- vowels %>%
filter(!is.na(sF1) & !is.na(sF2) & !is.na(sF3))
#remove any non-numeric values
vowels$sF1 <- as.numeric(gsub("[^0-9.-]", "", vowels$sF1))
vowels$sF2 <- as.numeric(gsub("[^0-9.-]", "", vowels$sF2))
vowels$sF3 <- as.numeric(gsub("[^0-9.-]", "", vowels$sF3))
#get mean value for formants
vowel_means <- vowels %>%
group_by(duration) %>%
summarise(
mean_sF1 = mean(sF1, na.rm = TRUE),
mean_sF2 = mean(sF2, na.rm = TRUE),
mean_sF3 = mean(sF3, na.rm = TRUE)
)
# Join the calculated means back to the original dataset based on 'duration'
vowels <- vowels %>%
left_join(vowel_means, by = "duration") %>%
distinct(duration, .keep_all = TRUE)  # Keep only one row per 'duration'
#re-select
vowels <- vowels %>%
select(Filename, Label, duration, mean_sF1, mean_sF2, mean_sF3)
#create new vowel column
vowels <- vowels %>%
mutate(vowel = substr(Label, 1, 1))
vowels <- vowels %>%
filter(!str_starts(Label, "xx")) %>%  # Filter out rows where Label starts with "xx"
mutate(vowel = case_when(
str_starts(Label, "ah") ~ "ɑ",   # If label starts with "ah", assign "ɑ"
str_starts(Label, "a") & !str_starts(Label, "ah") ~ "æ",  # If label starts with "a" but not "ah", assign "æ"
str_starts(Label, "i") ~ "i",  # If label starts with "i", assign "i"
str_starts(Label, "e") & !str_starts(Label, "ex") ~ "ɛ",  # If label starts with "e" but not "ex", assign "ɛ"
str_starts(Label, "ex") ~ "ə",  # If label starts with "ex", assign "ə"
str_starts(Label, "o") ~ "ø",  # If label starts with "o", assign "ø"
str_starts(Label, "u") ~ "y",  # If label starts with "u", assign "y"
TRUE ~ NA_character_  # This ensures that if no condition is met, 'vowel' will be NA
))
#create emphasis column
vowels <- vowels %>%
mutate(emphasis = case_when(
grepl("22", Label) ~ "emphatic",
grepl("13$", Label) ~ "mixed",
grepl("33", Label) ~ "mixed",
TRUE ~ "plain"
))
#add syllable status column
vowels <- vowels %>%
mutate(syllable_status = case_when(
grepl("13$", Label) ~ "plain_mixed",
grepl("33$", Label) ~ "mixed",
grepl("22$", Label) ~ "emphatic",
grepl("11$", Label) ~ "plain",
TRUE ~ NA_character_  # For cases that don't match any condition
))
#rename
vowels <- vowels %>%
rename(
F1 = mean_sF1,
F2 = mean_sF2,
F3 = mean_sF3)
#filter out NA
vowels <- vowels %>%
filter(!is.na(vowel))
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
#load csv's
raw_data_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/stops/results.csv",
locale = locale(encoding = "UTF-16"))
raw_data_s2 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/stops/results.csv",
locale = locale(encoding = "UTF-16"))
#make function to process data
process_VOT <- function(df, speaker_value = "s1") {
df %>%
mutate(
stop = case_when(
grepl("^ch|^CH|^č|^Č", Word) ~ "t͡ʃ",       # Words starting with "ch", "CH", "č", or "Č"
grepl("^j|^J", Word) ~ "d͡ʒ",               # Words starting with "j" or "J"
TRUE ~ tolower(substr(Word, 1, 1))          # All other cases: lowercase first letter
),
emphasis = ifelse(grepl("^[A-Z]", Word), "emphatic", "plain"), # Capitalized = "emphatic"
speaker = speaker_value,                       # Use the specified speaker value
voice = case_when(
stop %in% c("b", "d", "g", "d͡ʒ") ~ "voiced",  # Voiced stops
TRUE ~ "voiceless"                           # All other stops
)
)
}
#apply function to df's
df_s1 <- process_VOT(raw_data_s1, speaker_value = "s1")
df_s2 <- process_VOT(raw_data_s2, "s2")
#combine them
df <- rbind(df_s1, df_s2)
#filter 1 obvious outlier
df <- df %>%
filter(VOT >= -2)
#plot VOT
# Calculate the range of the VOT values for both plots
y_limits <- c(min(df$VOT, na.rm = TRUE), max(df$VOT, na.rm = TRUE))
# Voiced plot
voiced <- ggplot(df %>% filter(stop %in% c("b", "d", "g", "d͡ʒ")),
aes(x = factor(stop, levels = c("b", "d", "g", "d͡ʒ")),
y = VOT, fill = emphasis)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.9), alpha = 1) +
stat_summary(fun.data = "mean_se", geom = "errorbar",
position = position_dodge(width = 0.75), width = 0.2) +
labs(x = "Stop", y = "Mean VOT (ms)", title = "Voiced Stops") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14)) +
coord_cartesian(ylim = y_limits)  # Set the same y-axis limits
# Voiceless plot
voiceless <- ggplot(df %>% filter(stop %in% c("p", "t", "k", "q", "t͡ʃ")),
aes(x = factor(stop, levels = c("p", "t", "k", "q", "t͡ʃ")),
y = VOT, fill = emphasis)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.9), alpha = 1) +
stat_summary(fun.data = "mean_se", geom = "errorbar",
position = position_dodge(width = 0.75), width = 0.2) +
labs(x = "Stop", y = "", title = "Voiceless Stops") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_blank()) +
coord_cartesian(ylim = y_limits)  # Set the same y-axis limits
# Combine the plots
final_plot <- voiced + voiceless +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "VOT(Ms) by Emphasis",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
raw_data_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/stops/results.csv",
locale = locale(encoding = "UTF-16"))
raw_data_s2 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/stops/results.csv",
locale = locale(encoding = "UTF-16"))
#make function to process data
process_VOT <- function(df, speaker_value = "s1") {
df %>%
mutate(
stop = case_when(
grepl("^ch|^CH|^č|^Č", Word) ~ "t͡ʃ",       # Words starting with "ch", "CH", "č", or "Č"
grepl("^j|^J", Word) ~ "d͡ʒ",               # Words starting with "j" or "J"
TRUE ~ tolower(substr(Word, 1, 1))          # All other cases: lowercase first letter
),
emphasis = ifelse(grepl("^[A-Z]", Word), "emphatic", "plain"), # Capitalized = "emphatic"
speaker = speaker_value,                       # Use the specified speaker value
voice = case_when(
stop %in% c("b", "d", "g", "d͡ʒ") ~ "voiced",  # Voiced stops
TRUE ~ "voiceless"                           # All other stops
)
)
}
df_s1 <- process_VOT(raw_data_s1, speaker_value = "s1")
df_s2 <- process_VOT(raw_data_s2, "s2")
#combine them
df <- rbind(df_s1, df_s2)
#filter 1 obvious outlier
df <- df %>%
filter(VOT >= -2)
#plot VOT
# Calculate the range of the VOT values for both plots
y_limits <- c(min(df$VOT, na.rm = TRUE), max(df$VOT, na.rm = TRUE))
#plot VOT
# Calculate the range of the VOT values for both plots
y_limits <- c(min(df$VOT, na.rm = TRUE), max(df$VOT, na.rm = TRUE))
# Voiceless plot
voiceless <- ggplot(df %>% filter(stop %in% c("p", "t", "k", "q", "t͡ʃ")),
aes(x = factor(stop, levels = c("p", "t", "k", "q", "t͡ʃ")),
y = VOT, fill = emphasis)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.9), alpha = 1) +
stat_summary(fun.data = "mean_se", geom = "errorbar",
position = position_dodge(width = 0.75), width = 0.2) +
labs(x = "Stop", y = "", title = "Voiceless Stops") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_blank()) +
coord_cartesian(ylim = y_limits)  # Set the same y-axis limits
# Combine the plots
final_plot <- voiced + voiceless +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "VOT(Ms) by Emphasis",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
voiceless
final_plot <- voiced + voiceless +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "VOT(Ms) by Emphasis",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
final_plot
#model
model <- lmer(VOT ~ voice + emphasis + (1 | speaker) + (1| stop), data = df)
summary(model)
voiced
final_plot <- voiced + voiceless +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "VOT(Ms) by Emphasis",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
library(tidyverse)
library(lme4)
library(emmeans)
library(patchwork)
library(cowplot)
#load csv's
raw_data_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/fricatives/results_s1.csv", col_names = FALSE)
raw_data_s2 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/fricatives/results_s2.csv", col_names = FALSE)
# Use the first row as the actual column names
column_names <- as.character(unlist(raw_data_s1[1, ]))
# Remove any rows that are duplicates of the column names
cleaned_data_s1 <- raw_data_s1 %>%
filter(!apply(., 1, function(row) all(row == column_names)))
cleaned_data_s2 <- raw_data_s2 %>%
filter(!apply(., 1, function(row) all(row == column_names)))
# Assign proper column names
colnames(cleaned_data_s1) <- column_names
colnames(cleaned_data_s2) <- column_names
#add s1 and s2 columns
df_s1 <- cleaned_data_s1 %>%
mutate(source = "s1")
df_s2 <- cleaned_data_s2 %>%
mutate(source = "s2")
#function for fixing up df's
process_fricative_data <- function(df) {
df <- df %>%
# Create fricative column
mutate(fricative = ifelse(substr(label, 1, 2) == "sh", "sh", substr(label, 1, 1))) %>%
mutate(fricative = ifelse(fricative == "sh", "ʃ", fricative)) %>%
# Create emphatic column
mutate(emphasis = case_when(
grepl("22", label) ~ "emphatic",
TRUE ~ "plain"
)) %>%
# Create vowel column
mutate(vowel = case_when(
grepl("(ex|ə)$", label) ~ "ə",
grepl("ah$", label) ~ "ɑ",
grepl("(a|æ)$", label) & !grepl("ah$", label) ~ "æ",
grepl("(o|ø)$", label) ~ "ø",
grepl("i$", label) ~ "i",
grepl("(u|ʉ)$", label) ~ "ʉ",
grepl("xx$", label) ~ "əx",  # Updated here
grepl("(e|ɛ)$", label) ~ "ɛ",
grepl("ɑ$", label) ~ "ɑ",
TRUE ~ NA_character_
)) %>%
# Select COG and necessary columns
select(fricative, vowel, source, cog, emphasis)
return(df)
}
#run function of s1 data
df_s1 <- process_fricative_data(df_s1)
df_s2 <- process_fricative_data(df_s2)
# Model for Speaker 1
df_s1$cog <- as.numeric(df_s1$cog)
model_s1 <- lmer(cog ~ fricative + emphasis + (1 |vowel), data = df_s1)
summary(model_s1)
# Model for Speaker 2
df_s2$cog <- as.numeric(df_s2$cog)
model_s2 <- lmer(cog ~ fricative + emphasis + (1| vowel), data = df_s2)
summary(model_s2)
#plot model adjusted results
#speaker 1
#####change to standard error to keep consistent#######
em_means_s1 <- emmeans(model_s1, ~ fricative + emphasis)
em_means_s1_df <- as.data.frame(em_means_s1)
s1_plot <- ggplot(em_means_s1_df, aes(x = fricative, y = emmean, color = emphasis)) +
geom_point(position = position_dodge(width = 0.8), size = 4) +  # Points
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
position = position_dodge(width = 0.8), width = 0.2) +  # Error bars
labs(
x = "Fricative",
y = "COG",
title = "Speaker 1"
) +
theme_minimal() +
theme(legend.position = "top",
axis.text.x = element_text(size = 14))
#speaker 2
em_means_s2 <- emmeans(model_s2, ~ fricative + emphasis)
em_means_s2_df <- as.data.frame(em_means_s2)
s2_plot <- ggplot(em_means_s2_df, aes(x = fricative, y = emmean, color = emphasis)) +
geom_point(position = position_dodge(width = 0.8), size = 4) +  # Points
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
position = position_dodge(width = 0.8), width = 0.2) +  # Error bars
labs(
x = "Fricative",
y = "",
title = "Speaker 2"
) +
theme_minimal() +
theme(legend.position = "top",
axis.text.x = element_text(size = 14),
axis.text.y = element_blank())
final_plot <- s1_plot + s2_plot +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "Model Adjusted Center of Gravity (COG) (Hz)",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
) &
labs(color = "Emphasis")
print(final_plot)
