vowel == "ø" & emphasis == "emphatic" ~ "øˠ",
vowel == "y" & emphasis == "emphatic" ~ "yˠ",
vowel == "ɛ" & emphasis == "emphatic" ~ "ɛˠ",
vowel == "ə" & emphasis == "emphatic" ~ "əˠ",
vowel == "i" & emphasis == "emphatic" ~ "iˠ",
TRUE ~ vowel
))
#filter out na
result <- result %>%
filter(!is.na(vowel))
#### mahalanobis distances ####
# Function to calculate Mahalanobis distance for F1, F2
vmahalanobis_f1f2 = function (dat) {
if (nrow(dat) < 25) {
dat$zF1F2 = NA
return(dat)
}
means = c(mean(dat$F1, na.rm=T), mean(dat$F2, na.rm=T))
cov = cov(cbind(dat$F1, dat$F2))
dat$zF1F2 = mahalanobis(cbind(dat$F1, dat$F2),
center=means, cov=cov)
dat
}
# Set the outlier threshold
distance_cutoff <- 6
# Perform Mahalanobis on separate dataset for speaker
df_s1_filtered <-  result %>%
filter(speaker == "s1")
df_s1_filtered <- df_s1_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
df_s2_filtered <- result %>%
filter(speaker == "s2")
df_s2_filtered <- df_s2_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
# Remove flagged values
for (i in 1:nrow(df_s1_filtered)) {
if (!is.na(df_s1_filtered$zF1F2[i])) {
if (df_s1_filtered$zF1F2[i] > distance_cutoff){
df_s1_filtered$formant_outlier[i] = "outlier"
}
}
}
for (i in 1:nrow(df_s2_filtered)) {
if (!is.na(df_s2_filtered$zF1F2[i])) {
if (df_s2_filtered$zF1F2[i] > distance_cutoff){
df_s2_filtered$formant_outlier[i] = "outlier"
}
}
}
df_s1 <- df_s1_filtered %>%
filter(formant_outlier != "outlier" | is.na(formant_outlier))
df_s2 <- df_s2_filtered %>%
filter(formant_outlier != "outlier" | is.na(formant_outlier))
#####plotting#####
#plain vs emphatic
plot_vowel_means <- function(df) {
vowels_nm <- df %>%
filter(emphasis != "mixed")
vowels_nm_means <- vowels_nm %>%
group_by(vowel, emphasis) %>%
summarise(mean_f1 = mean(F1),
mean_f2 = mean(F2))
plot <- ggplot(vowels_nm, aes(x = F2, y = F1, color = emphasis, label = vowel)) +
geom_text(aes(label = vowel), alpha = 0.3, size = 4) +
geom_label(data = vowels_nm_means,
aes(x = mean_f2, y = mean_f1, label = vowel, color = emphasis),
size = 5,
fill = "white",
fontface = "bold") +
scale_x_reverse() +
scale_y_reverse() +
scale_color_manual(values = c("plain" = "blue", "emphatic" = "red")) +
stat_ellipse(aes(group = Segment), alpha = 0.3) +
theme_classic() +
theme(legend.position = "right") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
coord_fixed(ratio = 10/6) +
guides(color = guide_legend(title = "Emphasis"))
return(plot)
}
# call the fucntion
plot_vowel_means(df_s1)
plot_vowel_means(df_s2)
#mixed words
plot_mixed <- function(df) {
# Filter vowels_nm and compute means
vowels_nm <- df %>%
filter(emphasis != "mixed")
vowels_nm_means <- vowels_nm %>%
group_by(vowel, emphasis) %>%
summarise(mean_f1 = mean(F1),
mean_f2 = mean(F2))
# Filter vowels_np and compute means
vowels_np <- df %>%
filter(syllable_status == "mixed")
vowels_np_means <- vowels_np %>%
group_by(vowel, syllable_status) %>%
summarise(mean_f1 = mean(F1),
mean_f2 = mean(F2))
# Create the plot
ggplot(vowels_nm, aes(x = F2, y = F1, color = emphasis, label = vowel)) +
# Vowel symbols as points with increased transparency
geom_text(aes(label = vowel), alpha = 0.3, size = 4) +
# Mean labels from vowels_nm_means
geom_label(data = vowels_nm_means,
aes(x = mean_f2, y = mean_f1, label = vowel, color = emphasis),
size = 5,
fill = "white",
fontface = "bold") +
# Semi-transparent mean labels from vowels_np_means for mixed vowels
geom_label(data = filter(vowels_np_means, syllable_status == "mixed"),
aes(x = mean_f2, y = mean_f1, label = vowel),  # No color mapping
size = 8,
fill = "lightgrey",
fontface = "bold",
alpha = 0.5,
color = "black") +  # Fixed color for mixed vowel labels
scale_x_reverse() +
scale_y_reverse() +
scale_color_manual(values = c("plain" = "blue", "emphatic" = "red")) +
stat_ellipse(aes(group = Segment), alpha = 0.3) +
theme_classic() +
theme(legend.position = "right") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
coord_fixed(ratio = 10/6) +
guides(color = guide_legend(title = "Word Status"))
}
plot_mixed(df_s1)
plot_mixed(df_s2)
library(tidyverse)
library(lme4)
library(lmerTest)
library(rlang)
#import csv's
df_s1_raw <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/vowels/results_praat.csv")
df_s2_raw <- read_delim("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/vowels/results_praat.csv")
#create function that processes df's
process_vowels <- function(df) {
if ("Segment" %in% colnames(df)) {
df <- df %>%
# Remove anything following "-" in Filename
mutate(Filename = sub("-.*", "", Filename)) %>%
# Filter out rows where Segment starts with "xx"
filter(!str_starts(Segment, "xx")) %>%
# Assign vowel values based on Segment
mutate(vowel = case_when(
str_starts(Segment, "ah") ~ "ɑ",
str_starts(Segment, "a") & !str_starts(Segment, "ah") ~ "æ",
str_starts(Segment, "i") ~ "i",
str_starts(Segment, "e") & !str_starts(Segment, "ex") ~ "ɛ",
str_starts(Segment, "ex") ~ "ə",
str_starts(Segment, "o") ~ "ø",
str_starts(Segment, "u") ~ "y",
TRUE ~ NA_character_
)) %>%
# Create emphasis column
mutate(emphasis = case_when(
grepl("22", Segment) ~ "emphatic",
grepl("13$", Segment) ~ "mixed",
grepl("33", Segment) ~ "mixed",
TRUE ~ "plain"
)) %>%
# Add syllable status column
mutate(syllable_status = case_when(
grepl("13$", Segment) ~ "plain_mixed",
grepl("33$", Segment) ~ "mixed",
grepl("22$", Segment) ~ "emphatic",
grepl("11$", Segment) ~ "plain",
TRUE ~ NA_character_
)) %>%
# Filter out diphthongs (e.g., vowels starting with "j")
filter(!grepl("j", vowel)) %>%
return(df)
} else {
stop("The dataframe does not have a 'Segment' column.")
}
}
#call the function
df_s1 <- process_vowels(df_s1_raw) %>%
mutate(speaker = "s1")
df_s2 <- process_vowels(df_s2_raw) %>%
mutate(speaker = "s2")
#combine the two dataframes
df <- rbind(df_s1, df_s2)
#add stress column from different df
stress <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/metadata/stress.csv")
#join them
# Adding row IDs to help with the join
df <- df %>%
mutate(row_id = row_number())
stress <- stress %>%
mutate(row_id = row_number()) %>%
select(stress, row_id)
# Perform the join using both Filename and row_id
result <- left_join(df, stress, by =  "row_id")
# drop the row_id column after the join
result <- result %>%
select(-row_id)
# create phonetic categories
result <- result %>%
mutate(phonetic_vowel = case_when(
vowel == "ɑ" & emphasis == "emphatic" ~ "ɑˠ",
vowel == "æ" & emphasis == "emphatic" ~ "æˠ",
vowel == "ø" & emphasis == "emphatic" ~ "øˠ",
vowel == "y" & emphasis == "emphatic" ~ "yˠ",
vowel == "ɛ" & emphasis == "emphatic" ~ "ɛˠ",
vowel == "ə" & emphasis == "emphatic" ~ "əˠ",
vowel == "i" & emphasis == "emphatic" ~ "iˠ",
TRUE ~ vowel
))
#filter out na
result <- result %>%
filter(!is.na(vowel))
#### mahalanobis distances ####
# Function to calculate Mahalanobis distance for F1, F2
vmahalanobis_f1f2 = function (dat) {
if (nrow(dat) < 25) {
dat$zF1F2 = NA
return(dat)
}
means = c(mean(dat$F1, na.rm=T), mean(dat$F2, na.rm=T))
cov = cov(cbind(dat$F1, dat$F2))
dat$zF1F2 = mahalanobis(cbind(dat$F1, dat$F2),
center=means, cov=cov)
dat
}
# Set the outlier threshold
distance_cutoff <- 6
# Perform Mahalanobis on separate dataset for speaker
df_s1_filtered <-  result %>%
filter(speaker == "s1")
df_s1_filtered <- df_s1_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
df_s2_filtered <- result %>%
filter(speaker == "s2")
df_s2_filtered <- df_s2_filtered %>%
group_by(phonetic_vowel) %>%
do(vmahalanobis_f1f2(.)) %>%
ungroup() %>%
mutate(formant_outlier = NA)
# Remove flagged values
for (i in 1:nrow(df_s1_filtered)) {
if (!is.na(df_s1_filtered$zF1F2[i])) {
if (df_s1_filtered$zF1F2[i] > distance_cutoff){
df_s1_filtered$formant_outlier[i] = "outlier"
}
}
}
for (i in 1:nrow(df_s2_filtered)) {
if (!is.na(df_s2_filtered$zF1F2[i])) {
if (df_s2_filtered$zF1F2[i] > distance_cutoff){
df_s2_filtered$formant_outlier[i] = "outlier"
}
}
}
df_s1 <- df_s1_filtered %>%
filter(formant_outlier != "outlier" | is.na(formant_outlier))
df_s2 <- df_s2_filtered %>%
filter(formant_outlier != "outlier" | is.na(formant_outlier))
#####plotting#####
#plain vs emphatic
plot_vowel_means <- function(df) {
vowels_nm <- df %>%
filter(emphasis != "mixed")
vowels_nm_means <- vowels_nm %>%
group_by(vowel, emphasis) %>%
summarise(mean_f1 = mean(F1),
mean_f2 = mean(F2))
plot <- ggplot(vowels_nm, aes(x = F2, y = F1, color = emphasis, label = vowel)) +
geom_text(aes(label = vowel), alpha = 0.3, size = 4) +
geom_label(data = vowels_nm_means,
aes(x = mean_f2, y = mean_f1, label = vowel, color = emphasis),
size = 5,
fill = "white",
fontface = "bold") +
scale_x_reverse() +
scale_y_reverse() +
scale_color_manual(values = c("plain" = "blue", "emphatic" = "red")) +
stat_ellipse(aes(group = Segment), alpha = 0.3) +
theme_classic() +
theme(legend.position = "right") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
coord_fixed(ratio = 10/6) +
guides(color = guide_legend(title = "Emphasis"))
return(plot)
}
# call the fucntion
vowel_space_s1 <- plot_vowel_means(df_s1)
vowel_space_s2 <- plot_vowel_means(df_s2)
#mixed words
plot_mixed <- function(df) {
# Filter vowels_nm and compute means
vowels_nm <- df %>%
filter(emphasis != "mixed")
vowels_nm_means <- vowels_nm %>%
group_by(vowel, emphasis) %>%
summarise(mean_f1 = mean(F1),
mean_f2 = mean(F2))
# Filter vowels_np and compute means
vowels_np <- df %>%
filter(syllable_status == "mixed")
vowels_np_means <- vowels_np %>%
group_by(vowel, syllable_status) %>%
summarise(mean_f1 = mean(F1),
mean_f2 = mean(F2))
# Create the plot
ggplot(vowels_nm, aes(x = F2, y = F1, color = emphasis, label = vowel)) +
# Vowel symbols as points with increased transparency
geom_text(aes(label = vowel), alpha = 0.3, size = 4) +
# Mean labels from vowels_nm_means
geom_label(data = vowels_nm_means,
aes(x = mean_f2, y = mean_f1, label = vowel, color = emphasis),
size = 5,
fill = "white",
fontface = "bold") +
# Semi-transparent mean labels from vowels_np_means for mixed vowels
geom_label(data = filter(vowels_np_means, syllable_status == "mixed"),
aes(x = mean_f2, y = mean_f1, label = vowel),  # No color mapping
size = 8,
fill = "lightgrey",
fontface = "bold",
alpha = 0.5,
color = "black") +  # Fixed color for mixed vowel labels
scale_x_reverse() +
scale_y_reverse() +
scale_color_manual(values = c("plain" = "blue", "emphatic" = "red")) +
stat_ellipse(aes(group = Segment), alpha = 0.3) +
theme_classic() +
theme(legend.position = "right") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
coord_fixed(ratio = 10/6) +
guides(color = guide_legend(title = "Word Status"))
}
mixed_vowels_s1 <- plot_mixed(df_s1)
mixed_vowels_s2 <- plot_mixed(df_s2)
mixed_vowels_s1
mixed_vowels_s2
library(tidyverse)
#load df's
mc_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/morphologically_complex_words")
#load df's
mc_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/morphologically_complex_words/results_praat.csv")
locale = locale(encoding = "UTF-8")
#load df's
mc_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/morphologically_complex_words/results_praat.csv",
locale = locale(encoding = "UTF-8"))
#load df's
mc_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/morphologically_complex_words/results_praat.csv",
locale = locale(encoding = "UTF-8", BOM = TRUE))
#load df's
mc_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/morphologically_complex_words/results_praat.csv")
mc_s2 read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/morphologically_complex_words/results_praat.csv")
mc_s2 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/morphologically_complex_words/results_praat.csv")
mc_s1
#function to handle df
process_vowels <- function(df) {
if ("Segment" %in% colnames(df)) {
df <- df %>%
# Remove anything following "-" in Filename
mutate(Filename = sub("-.*", "", Filename)) %>%
# Filter out rows where Segment starts with "xx"
filter(!str_starts(Segment, "xx")) %>%
# Assign vowel values based on Segment
mutate(vowel = case_when(
str_starts(Segment, "ah") ~ "ɑ",
str_starts(Segment, "a") & !str_starts(Segment, "ah") ~ "æ",
str_starts(Segment, "i") ~ "i",
str_starts(Segment, "e") & !str_starts(Segment, "ex") ~ "ɛ",
str_starts(Segment, "ex") ~ "ə",
str_starts(Segment, "o") ~ "ø",
str_starts(Segment, "u") ~ "y",
TRUE ~ NA_character_
)) %>%
# Create emphasis column
mutate(emphasis = case_when(
grepl("22", Segment) ~ "emphatic",
grepl("13$", Segment) ~ "mixed",
grepl("33", Segment) ~ "mixed",
TRUE ~ "plain"
)) %>%
# Add syllable status column
mutate(syllable_status = case_when(
grepl("13$", Segment) ~ "plain_mixed",
grepl("33$", Segment) ~ "mixed",
grepl("22$", Segment) ~ "emphatic",
grepl("11$", Segment) ~ "plain",
TRUE ~ NA_character_
)) %>%
# Filter out diphthongs (e.g., vowels starting with "j")
filter(!grepl("j", vowel)) %>%
return(df)
} else {
stop("The dataframe does not have a 'Segment' column.")
}
}
mc_s1 <- process_vowels(mc_s1)
mc_s1
library(tidyverse)
library(lme4)
library(lmerTest)
library(emmeans)
#load csv's
raw_data_s1 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s1/stops/results.csv",
locale = locale(encoding = "UTF-16"))
raw_data_s2 <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/s2/stops/results.csv",
locale = locale(encoding = "UTF-16"))
#make function to process data
process_VOT <- function(df, speaker_value = "s1") {
df %>%
mutate(
stop = case_when(
grepl("^ch|^CH|^č|^Č", Word) ~ "t͡ʃ",       # Words starting with "ch", "CH", "č", or "Č"
grepl("^j|^J", Word) ~ "d͡ʒ",               # Words starting with "j" or "J"
TRUE ~ tolower(substr(Word, 1, 1))          # All other cases: lowercase first letter
),
emphasis = ifelse(grepl("^[A-Z]", Word), "emphatic", "plain"), # Capitalized = "emphatic"
speaker = speaker_value,                       # Use the specified speaker value
voice = case_when(
stop %in% c("b", "d", "g", "d͡ʒ") ~ "voiced",  # Voiced stops
TRUE ~ "voiceless"                           # All other stops
)
)
}
#apply function to df's
df_s1 <- process_VOT(raw_data_s1, speaker_value = "s1")
df_s2 <- process_VOT(raw_data_s2, "s2")
#combine them
df <- rbind(df_s1, df_s2)
#filter 1 obvious outlier
df <- df %>%
filter(VOT >= -2)
#plot VOT
# Calculate the range of the VOT values for both plots
y_limits <- c(min(df$VOT, na.rm = TRUE), max(df$VOT, na.rm = TRUE))
# Voiced plot
voiced <- ggplot(df %>% filter(stop %in% c("b", "d", "g", "d͡ʒ")),
aes(x = factor(stop, levels = c("b", "d", "g", "d͡ʒ")),
y = VOT, fill = emphasis)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.9), alpha = 1) +
stat_summary(fun.data = "mean_se", geom = "errorbar",
position = position_dodge(width = 0.75), width = 0.2) +
labs(x = "Stop", y = "Mean VOT (ms)", title = "Voiced Stops") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14)) +
coord_cartesian(ylim = y_limits)  # Set the same y-axis limits
# Voiceless plot
voiceless <- ggplot(df %>% filter(stop %in% c("p", "t", "k", "q", "t͡ʃ")),
aes(x = factor(stop, levels = c("p", "t", "k", "q", "t͡ʃ")),
y = VOT, fill = emphasis)) +
stat_summary(fun = mean, geom = "bar", position = position_dodge(width = 0.9), alpha = 1) +
stat_summary(fun.data = "mean_se", geom = "errorbar",
position = position_dodge(width = 0.75), width = 0.2) +
labs(x = "Stop", y = "", title = "Voiceless Stops") +
theme_minimal() +
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_blank()) +
coord_cartesian(ylim = y_limits)  # Set the same y-axis limits
# Combine the plots
final_plot <- voiced + voiceless +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "VOT(Ms) by Emphasis",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
voiceless
voiced
final_plot <- voiced + voiceless +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "VOT(Ms) by Emphasis",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
library(patchwork)
# Combine the plots
final_plot <- voiced + voiceless +
plot_layout(ncol = 2, guides = "collect") +  # Collects all legends into one
plot_annotation(
title = "VOT(Ms) by Emphasis",
subtitle = NULL
) &
theme(
legend.position = "bottom",  # Moves the legend to the bottom of the entire plot
axis.title.y = element_text(size = 14),  # Ensures the y-axis title appears
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14)
)
print(final_plot)
